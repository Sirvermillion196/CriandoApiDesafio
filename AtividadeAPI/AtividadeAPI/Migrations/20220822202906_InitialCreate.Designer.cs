// <auto-generated />
using System;
using AtividadeAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AtividadeAPI.Migrations
{
    [DbContext(typeof(cursodev_grupo1Context))]
    [Migration("20220822202906_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AtividadeAPI.Banco", b =>
                {
                    b.Property<int>("IdBanco")
                        .HasColumnType("int");

                    b.Property<int?>("IdConta")
                        .HasColumnType("int");

                    b.HasKey("IdBanco")
                        .HasName("PK__Banco__2D3F553EBF396714");

                    b.HasIndex("IdConta");

                    b.ToTable("Banco");
                });

            modelBuilder.Entity("AtividadeAPI.Clientes", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClienteId"), 1L, 1);

                    b.Property<int?>("Cnpj")
                        .HasColumnType("int")
                        .HasColumnName("CNPJ");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("PaisId")
                        .HasColumnType("int");

                    b.HasKey("ClienteId")
                        .HasName("PK__Clientes__71ABD08758F95C06");

                    b.HasIndex("PaisId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("AtividadeAPI.ContaContabeis", b =>
                {
                    b.Property<int>("IdConta")
                        .HasColumnType("int");

                    b.HasKey("IdConta")
                        .HasName("PK__Conta_Co__D599CC48995A617B");

                    b.ToTable("Conta_Contabeis");
                });

            modelBuilder.Entity("AtividadeAPI.ContaContabeis1", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("IdContaConta")
                        .HasColumnType("int")
                        .HasColumnName("idContaConta");

                    b.HasKey("Id");

                    b.ToTable("ContaContabeis");
                });

            modelBuilder.Entity("AtividadeAPI.Empresa", b =>
                {
                    b.Property<int>("IdEmpresa")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdEmpresa")
                        .HasName("PK__Empresa__5EF4033E85CB2FFE");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("AtividadeAPI.Funcionarios", b =>
                {
                    b.Property<int>("IdFuncionarios")
                        .HasColumnType("int");

                    b.Property<int?>("IdEmpresa")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdFuncionarios")
                        .HasName("PK__Funciona__2B37BA37D55A0514");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("AtividadeAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AtividadeAPI.Moeda", b =>
                {
                    b.Property<int>("MoedaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MoedaId"), 1L, 1);

                    b.Property<double>("Cotacao")
                        .HasColumnType("float");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("MoedaId");

                    b.ToTable("Moeda");
                });

            modelBuilder.Entity("AtividadeAPI.Pais", b =>
                {
                    b.Property<int>("PaisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaisId"), 1L, 1);

                    b.Property<int?>("MoedaId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("PaisId");

                    b.HasIndex("MoedaId");

                    b.ToTable("Pais");
                });

            modelBuilder.Entity("AtividadeAPI.Projetos", b =>
                {
                    b.Property<int>("ProjetosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjetosId"), 1L, 1);

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int?>("NumeroPessoas")
                        .HasColumnType("int");

                    b.Property<string>("Prazo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Tamanho")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("Valor")
                        .HasColumnType("float");

                    b.HasKey("ProjetosId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Projetos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AtividadeAPI.Banco", b =>
                {
                    b.HasOne("AtividadeAPI.ContaContabeis", "IdContaNavigation")
                        .WithMany("Banco")
                        .HasForeignKey("IdConta")
                        .HasConstraintName("FK__Banco__IdConta__403A8C7D");

                    b.Navigation("IdContaNavigation");
                });

            modelBuilder.Entity("AtividadeAPI.Clientes", b =>
                {
                    b.HasOne("AtividadeAPI.Pais", "Pais")
                        .WithMany("Clientes")
                        .HasForeignKey("PaisId")
                        .HasConstraintName("FK__Clientes__PaisId__33D4B598");

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("AtividadeAPI.Funcionarios", b =>
                {
                    b.HasOne("AtividadeAPI.Empresa", "IdEmpresaNavigation")
                        .WithMany("Funcionarios")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("FK__Funcionar__IdEmp__44FF419A");

                    b.Navigation("IdEmpresaNavigation");
                });

            modelBuilder.Entity("AtividadeAPI.Pais", b =>
                {
                    b.HasOne("AtividadeAPI.Moeda", "Moeda")
                        .WithMany("Pais")
                        .HasForeignKey("MoedaId")
                        .HasConstraintName("FK__Pais__MoedaId__30F848ED");

                    b.Navigation("Moeda");
                });

            modelBuilder.Entity("AtividadeAPI.Projetos", b =>
                {
                    b.HasOne("AtividadeAPI.Clientes", "Cliente")
                        .WithMany("Projetos")
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("FK__Projetos__Client__36B12243");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AtividadeAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AtividadeAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtividadeAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AtividadeAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AtividadeAPI.Clientes", b =>
                {
                    b.Navigation("Projetos");
                });

            modelBuilder.Entity("AtividadeAPI.ContaContabeis", b =>
                {
                    b.Navigation("Banco");
                });

            modelBuilder.Entity("AtividadeAPI.Empresa", b =>
                {
                    b.Navigation("Funcionarios");
                });

            modelBuilder.Entity("AtividadeAPI.Moeda", b =>
                {
                    b.Navigation("Pais");
                });

            modelBuilder.Entity("AtividadeAPI.Pais", b =>
                {
                    b.Navigation("Clientes");
                });
#pragma warning restore 612, 618
        }
    }
}
